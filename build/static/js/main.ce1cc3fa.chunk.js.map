{"version":3,"sources":["lib/sign.js","lib/contracts/escrow.tmpl.teal","AlgorandWalletConnector.tsx","lib/getnft.js","App.tsx","index.tsx","lib/algorand.ts"],"names":["sign","mytxnb","a","group","signed","console","log","signedTxn","Pipeline","pipeConnector","wallet","signTransaction","toByte","blob","map","txn","txnsb","forEach","item","push","txns","txnsToSign","txnb","packed","algosdk","encodeUnsignedTransaction","encodedTxn","Buffer","from","toString","message","length","i","Signers","requestParams","request","formatJsonRpcRequest","connector","sendCustomRequest","result","window","AlgoSigner","signTxn","init","AlgorandWalletConnector","props","React","selectorOpen","setSelectorOpen","address","setAddress","sessionWallet","updateWallet","e","choice","currentTarget","id","allowedWallets","undefined","disconnect","sw","SessionWallet","network","permissionCallback","connect","interval","setInterval","wc","localStorage","getItem","wcObj","JSON","parse","accounts","clearInterval","setAccountList","connected","then","success","walletOptions","Object","entries","k","minimal","style","marginBottom","color","backgroundColor","border","borderRadius","intent","large","fill","className","outlined","onClick","onChange","width","height","xmlns","viewBox","d","transform","stroke","strokeWidth","overflow","rx","borderColor","rightIcon","isOpen","title","onClose","Classes","DIALOG_BODY","accts","addr","idx","value","substr","setAccountIndex","parseInt","target","iconProps","icon","defaultValue","accountIndex","slice","clear","location","reload","Arc69","this","algoExplorerApiBaseUrl","assetId","url","fetch","res","json","transactions","error","sort","b","transaction","noteBase64","note","noteString","atob","trim","replace","noteObject","standard","getNFTInfo","arc69","metadata","MetaDataProps","properties","keys","object","property","HelpDropdown","useState","setIsOpen","canEscapeKeyClose","canOutsideClickClose","isCloseButtonShown","type","href","ClaimDialog","open","setSigned","progress","setProgress","handleClose","useCallback","useEffect","p","background","boxShadow","animate","margin","text","isIOS","triggerHelp","App","conf","name","nft","setNFT","accountList","setConnected","claimable","setClaimable","claimed","setClaimed","loading","setLoading","setOpen","metaData","setMetaData","metaData2","setMetaData2","params","URLSearchParams","search","escrow","get","secret","initial","setInitial","document","createElement","image","imageBlog","imageURL","URL","createObjectURL","download","body","appendChild","click","removeChild","getAsaId","asaId","collect","txn_group","getNFT","flavor","sendWait","includes","alert","buttons","marginTop","disabled","float","marginRight","alt","src","rel","Group","align","Alignment","LEFT","Heading","version","x","y","RIGHT","darkMode","elevation","Elevation","FOUR","getElementById","ReactDOM","render","StrictMode","seeder","algod","host","port","token","client","Algodv2","claimer","getLsig","lsig","getTransactionParams","do","sp","optinTxn","Transaction","to","assetIndex","TransactionType","axfer","amount","xferTxn","closeRemainderTo","closeTxn","pay","grouped","assignGroupID","args","createSignature","txID","s_xfer","signLogicSigTransactionObject","s_close","myAlgo","arg1","arg2","arg3","s_optin","Uint8Array","txid","pd","decodeAddress","publicKey","btxid","base32","decode","asBytes","toSign","set","sk","nacl","detached","getAssetByID","asa","cid","split","accountInformation","ai","Error","addrHex","get_file","escrow_template","tmpl","compile","compiled","LogicSigAccount","program","response","checkStatus","arrayBuffer","buffer","TextDecoder","catch","err","ok","status","statusText","sendRawTransaction","t","txId","waitForConfirmation","algodclient","timeout","startround","currentround","pendingTransactionInformation","pending","statusAfterBlock"],"mappings":"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","file":"static/js/main.ce1cc3fa.chunk.js","sourcesContent":["import Pipeline from '@pipeline-ui-2/pipeline'\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport algosdk from 'algosdk'\n\nexport async function sign(mytxnb, group = false, signed = []) {\n\n    console.log(mytxnb)\n    let signedTxn = \"\"\n\n    if (Pipeline.pipeConnector === \"myAlgoWallet\") {\n        if (!group) {\n            signedTxn = await Pipeline.wallet.signTransaction(mytxnb.toByte())\n            signedTxn = signedTxn.blob;\n            return signedTxn\n\n        }\n        else {\n            signedTxn = await Pipeline.wallet.signTransaction(mytxnb.map(txn => txn.toByte()))\n            let txnsb = []\n            signedTxn.forEach(item => {\n                txnsb.push(item.blob)\n            })\n            return txnsb\n        }\n    }\n    else {\n\n        let txns = []\n        if (!group) {\n            txns[0] = mytxnb\n        }\n        else {\n          txns = mytxnb\n        }\n\n        console.log(\"Unencoded txns:\")\n        console.log(txns)\n\n        /*\n                let prototxn = {\n                    \"amt\": mytxnb.amount,\n                    \"fee\": 1000,\n                    \"fv\": mytxnb.lastRound - 1000,\n                    \"gen\": mytxnb.genesisID,\n                    \"gh\": new Uint8Array(Buffer.from(mytxnb.genesisHash, 'base64')),\n                    \"lv\": mytxnb.lastRound,\n                    \"note\": mytxnb.note,\n                    \"rcv\": new Uint8Array(base32.decode.asBytes(mytxnb.to).slice(0, 32)),\n                    \"snd\": new Uint8Array(base32.decode.asBytes(Pipeline.address).slice(0, 32)),\n                    \"type\": \"pay\"\n                }\n        \n                let prototxnASA = {};\n                let prototxnb = encode(prototxn);\n                let txns = [];\n                txns[0] = prototxnb;\n        \n                if (Pipeline.index !== 0) {\n                    prototxnASA = {\n                        \"aamt\": mytxnb.amount,\n                        \"arcv\": new Uint8Array(base32.decode.asBytes(mytxnb.to).slice(0, 32)),\n                        \"fee\": 1000,\n                        \"fv\": mytxnb.lastRound - 1000,\n                        \"gen\": mytxnb.genesisID,\n                        \"gh\": new Uint8Array(Buffer.from(mytxnb.genesisHash, 'base64')),\n                        \"lv\": mytxnb.lastRound,\n                        \"note\": mytxnb.note,\n                        \"snd\": new Uint8Array(base32.decode.asBytes(Pipeline.address).slice(0, 32)),\n                        \"type\": \"axfer\",\n                        \"xaid\": parseInt(mytxnb.assetIndex)\n                    }\n                    prototxnb = encode(prototxnASA);\n                    txns[0] = prototxnb;\n                }\n                \n                        console.log(prototxnb)\n                        console.log(new TextDecoder().decode(prototxnb))\n                        console.log(JSON.stringify(decode(prototxnb)))\n                */\n        // Sign transaction\n\n        let txnsToSign = txns.map(txnb => {\n\n            let packed = algosdk.encodeUnsignedTransaction(txnb)\n            let encodedTxn = Buffer.from(packed).toString(\"base64\")\n\n            if (Pipeline.pipeConnector === \"WalletConnect\") {\n                return {\n                    txn: encodedTxn,\n                    message: \"\",\n                    // Note: if the transaction does not need to be signed (because it's part of an atomic group\n                    // that will be signed by another party), specify an empty singers array like so:\n                    // signers: [],\n                };\n            }\n            else {\n                return { txn: encodedTxn }\n            }\n        });\n\n        if (group && signed.length !== 0){\n            for (let i = 0; i< signed.length; i++){\n                txnsToSign[i].Signers = []\n            }\n        }\n\n        let requestParams = [txnsToSign]\n        console.log(\"TXNs to Sign:\")\n        console.log(requestParams)\n\n        if (Pipeline.pipeConnector === \"WalletConnect\") {\n\n            let request = formatJsonRpcRequest(\"algo_signTxn\", requestParams)\n    \n            //request.id = Pipeline.chainId\n\n            console.log(request);\n\n            try {\n                let result = await Pipeline.connector.sendCustomRequest(request);\n\n                return result\n            }\n            catch (error) { console.log(error) }\n        }\n        else {\n            try {\n                \n                    let result = await window.AlgoSigner.signTxn(requestParams)\n\n                    return result\n            }\n            catch (error) { console.log(error) }\n        }\n    }\n}","export default __webpack_public_path__ + \"static/media/escrow.tmpl.7fa75b7c.teal\";","// @ts-nocheck\nimport * as React from \"react\";\n\nimport { SessionWallet, allowedWallets } from \"algorand-session-wallet\";\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from \"@blueprintjs/core\";\nimport { IconName } from \"@blueprintjs/icons\";\nimport Pipeline from \"@pipeline-ui-2/pipeline\";\n\nconst wallet = Pipeline.init();\n\nexport default function AlgorandWalletConnector(props) {\n  const [selectorOpen, setSelectorOpen] = React.useState(false);\n  const [address, setAddress] = React.useState(\"\");\n\n  const { sessionWallet, updateWallet } = props;\n  React.useEffect(() => {\n    if (sessionWallet.connected()) return;\n\n    let interval: any;\n    sessionWallet.connect().then((success) => {\n      if (!success) return;\n\n      // Check every 500ms to see if we've connected then kill the interval\n      // This is most useful in the case of walletconnect where it may be several\n      // seconds before the user connects\n      interval = setInterval(() => {\n        if (sessionWallet.connected()) {\n          clearInterval(interval);\n          updateWallet(sessionWallet);\n        }\n      }, 500);\n    });\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [sessionWallet, updateWallet]);\n\n  function disconnectWallet() {\n    localStorage.clear();\n    window.location.reload();\n  }\n\n  function handleDisplayWalletSelection() {\n    setSelectorOpen(true);\n  }\n\n  async function handleSelectedWallet(e: any) {\n    const choice = e.currentTarget.id;\n\n    if (!(choice in allowedWallets)) {\n      if (props.sessionWallet.wallet !== undefined)\n        props.sessionWallet.disconnect();\n      return setSelectorOpen(false);\n    }\n\n    const sw = new SessionWallet(\n      props.sessionWallet.network,\n      props.sessionWallet.permissionCallback,\n      choice\n    );\n\n    if (!(await sw.connect())) {\n      sw.disconnect();\n    }\n\n    const interval = setInterval(() => {\n      // If they've already connected, we wont get an on connect, have to check here\n      const wc = localStorage.getItem(\"walletconnect\");\n      if (wc === null || wc === undefined || wc === \"\") return;\n\n      const wcObj = JSON.parse(wc);\n      const accounts = wcObj.accounts;\n      if (accounts.length > 0) {\n        clearInterval(interval);\n        sw.setAccountList(wcObj.accounts);\n        props.updateWallet(\n          new SessionWallet(sw.network, sw.permissionCallback, choice)\n        );\n      }\n    }, 250);\n\n    props.updateWallet(sw);\n\n    setSelectorOpen(false);\n  }\n\n  function handleChangeAccount(e: any) {\n    props.sessionWallet.setAccountIndex(parseInt(e.target.value));\n    props.updateWallet(props.sessionWallet);\n  }\n\n  const walletOptions = [];\n  for (const [k, v] of Object.entries(allowedWallets)) {\n    // NOTE: remove if you want other wallets\n    if (k !== \"wallet-connect\") continue;\n\n    walletOptions.push(\n      <li key={k}>\n        <div></div>\n        <Button\n          minimal={true}\n          style={{\n            marginBottom: '20px',\n            color: \"rgb(255 255 255 / 90%)\",\n            backgroundColor: \"rgb(44, 47, 54)\",\n              border: \"1px solid rgb(88 91 96)\",\n            borderRadius: '12px',\n          }}\n          intent=\"warning\"\n          id={k}\n          large={true}\n          fill={true}\n          className=\"wallet-btn\"\n          outlined={true}\n          onClick={async () => {\n            Pipeline.pipeConnector = \"WalletConnect\";\n            let address = await Pipeline.connect(wallet);\n            props.onChange(address);\n            setAddress(address);\n          }}\n        >\n          <div className=\"wallet-option\">\n            <h3 className=\"wallet-con\">WalletConnect</h3>\n            <svg\n              className=\"r-ff-icon-walletIcon\"\n              width=\"24\"\n              height=\"24\"\n              id=\"Layer_1\"\n              data-name=\"Layer 1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 25.41177 25.41177\"\n            >\n              <path\n                fill=\"currentColor\"\n                d=\"M91.76819,113.36629a7.63061,7.63061,0,0,1,10.63,0l.35336.34588a.36254.36254,0,0,1,.00776.51265l-.00776.00777L101.543,115.4158a.19074.19074,0,0,1-.26578,0l-.48613-.476a5.32327,5.32327,0,0,0-7.41579,0l-.52066.50976a.19076.19076,0,0,1-.26578,0l-1.20845-1.18322a.36254.36254,0,0,1-.00777-.51265l.00777-.00777Zm13.12936,2.447,1.07556,1.05309a.36255.36255,0,0,1,.00776.51265l-.00776.00776-4.84978,4.74849a.38166.38166,0,0,1-.53156,0l-3.44212-3.37016a.09541.09541,0,0,0-.13289,0l-3.442,3.37016a.38167.38167,0,0,1-.53157,0l-4.8499-4.74855a.36254.36254,0,0,1-.00776-.51265l.00776-.00777,1.07556-1.05308a.38159.38159,0,0,1,.5315,0l3.44218,3.37022a.09547.09547,0,0,0,.13289,0l3.442-3.37022a.38159.38159,0,0,1,.5315,0l3.44218,3.37022a.09547.09547,0,0,0,.13289,0l3.44206-3.37016a.38166.38166,0,0,1,.53156,0Z\"\n                transform=\"translate(-84.37732 -104.02104)\"\n              />\n              <path\n                d=\"M97.0832,104.72692h0a12,12,0,0,1,12,12h0a12,12,0,0,1-12,12h0a12,12,0,0,1-12-12h0A12,12,0,0,1,97.0832,104.72692Z\"\n                transform=\"translate(-84.37732 -104.02104)\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n              />\n            </svg>\n          </div>\n        </Button>\n        <Button\n          id={k}\n          style={{\n            marginBottom: '20px',\n            color: \"rgb(255 255 255 / 90%)\",\n            backgroundColor: \"rgb(44, 47, 54)\",\n              border: \"1px solid rgb(88 91 96)\",\n            borderRadius: '12px',\n          }}\n          intent=\"warning\"\n          large={true}\n          fill={true}\n          minimal={true}\n          className=\"wallet-btn\"\n          outlined={true}\n          onClick={async () => {\n            Pipeline.pipeConnector = \"myAlgoWallet\";\n            let address = await Pipeline.connect(wallet);\n            props.onChange(address);\n            setAddress(address);\n          }}\n        >\n          <div className=\"wallet-option\">\n            <h3 className=\"wallet-con\">MyAlgo Wallet</h3>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"r-ff-icon-walletIcon\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 34 34\"\n              fill=\"currentColor\"\n              overflow=\"visible\"\n            >\n              <g xmlns=\"http://www.w3.org/2000/svg\" className=\"currentLayer\">\n                <title>Layer 1</title>\n                <rect\n                  height={34}\n                  width={34}\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth={2}\n                  rx={34}\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M23.375 12.171l-.16-.613-.362.613-2.179 3.869-1.852 3.256-1.608 2.834-.926 1.633h-2.62l2.193-3.868.52-.92-.29-1.083-.828-3.174-.669-2.547-.16-.613-.361.613-2.18 3.869-2.192 3.855-2.193 3.868h-2.62l2.192-3.868 2.18-3.855 2.192-3.869 2.14-3.773.053-.082h2.286l.107.409.83 3.16.08.286.748 2.874.268.995.024.092.052-.092 2.193-3.869 2.14-3.773.053-.082h2.286l.107.409 4.397 15.038h-2.62z\"\n                />\n              </g>\n            </svg>\n          </div>\n        </Button>\n      </li>\n    );\n  }\n\n  if (!props.connected)\n    return (\n      <div >\n        <Button\n          minimal={true}\n          style={{\n            color: \"rgb(123, 120, 255)\",\n            borderColor: \"rgb(123, 120, 255)\",\n            borderRadius: \"8px\",\n          }}\n          rightIcon=\"selection\"\n          intent=\"warning\"\n          outlined={true}\n          onClick={handleDisplayWalletSelection}\n        >\n          Connect\n        </Button>\n\n        <Dialog\n          isOpen={selectorOpen}\n          title=\"Select Wallet\"\n          onClose={handleSelectedWallet}\n          className=\"close-icon\"\n        >\n          <div className={Classes.DIALOG_BODY}>\n            <ul className=\"wallet-option-list\">{walletOptions}</ul>\n          </div>\n        </Dialog>\n      </div>\n    );\n\n  const addr_list = props.accts.map((addr, idx) => {\n    return (\n      <option value={idx} key={idx}>\n        {\" \"}\n        {addr.substr(0, 8)}...{\" \"}\n      </option>\n    );\n  });\n\n  const iconprops = {\n    icon: \"symbol-circle\" as IconName,\n    intent: \"success\" as Intent,\n  };\n\n  return (\n    <div className=\"button-connected\">\n      <HTMLSelect\n        onChange={handleChangeAccount}\n        minimal={true}\n        iconProps={iconprops}\n        defaultValue={props.sessionWallet.accountIndex()}\n      >\n        <option>\n          {address.slice(0, 3) +\n            \"...\" +\n            address.slice(address.length - 3, address.length)}\n        </option>\n      </HTMLSelect>\n      <Button icon=\"log-out\" minimal={true} onClick={disconnectWallet}></Button>\n    </div>\n  );\n}\n","class Arc69 {\n  constructor() {\n    this.algoExplorerApiBaseUrl = \"https://algoindexer.algoexplorerapi.io\";\n  }\n\n  async fetch(assetId) {\n    // Fetch `acfg` transactions.\n    const url = `${this.algoExplorerApiBaseUrl}/v2/transactions?asset-id=${assetId}&tx-type=acfg`;\n    let transactions;\n    try {\n      transactions = (await fetch(url).then((res) => res.json())).transactions;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n\n    // Sort the most recent `acfg` transactions first.\n    transactions.sort((a, b) => b[\"round-time\"] - a[\"round-time\"]);\n\n    // Attempt to parse each `acf` transaction's note for ARC69 metadata.\n    for (const transaction of transactions) {\n      try {\n        const noteBase64 = transaction.note;\n        const noteString = atob(noteBase64)\n          .trim()\n          .replace(/[^ -~]+/g, \"\");\n        const noteObject = JSON.parse(noteString);\n        if (noteObject.standard === \"arc69\") {\n          return noteObject;\n        }\n      } catch (err) {\n        // Oh well...\n      }\n    }\n    return null;\n  }\n}\n\nexport default async function getNFTInfo(assetId) {\n  // STUPIDHORSE 069\n  // https://www.randgallery.com/algo-collection/?address=308075440\n\n  // Fetch and use ARC69 metadata.\n  const arc69 = new Arc69();\n  let metadata = await arc69.fetch(assetId);\n  return metadata;\n}\n","// @ts-nocheck\n\nimport React, { useEffect } from \"react\";\nimport { SessionWallet } from \"algorand-session-wallet\";\nimport AlgorandWalletConnector from \"./AlgorandWalletConnector\";\nimport {\n  Alignment,\n  AnchorButton,\n  Button,\n  Card,\n  Elevation,\n  Navbar,\n  ProgressBar,\n} from \"@blueprintjs/core\";\nimport { conf, collect, sendWait, getAsaId, getNFT } from \"./lib/algorand\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport {\n  BrowserView,\n  MobileView,\n  isIOS,\n} from \"react-device-detect\";\nimport Pipeline from \"@pipeline-ui-2/pipeline\";\nimport getNFTInfo from \"./lib/getnft\";\n\nconst wallet = Pipeline.init();\n\nconst MetaDataProps = (props) => {\n  let properties = Object.keys(props.object);\n  return (\n    <div className=\"meta-card\">\n      {properties.map((property) => {\n        return (\n          <div className=\"card-flex\">\n            <label><b>{property}:  &nbsp;</b></label>\n            <p>{props.object[property]}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n}; \n\nfunction App() {\n  const sw = new SessionWallet(conf.network);\n  const [sessionWallet] = React.useState(sw);\n\n  const [nft, setNFT] = React.useState({\n    id: 0,\n    url: \"pixel-astro.png\",\n    name: \"TBD\",\n  });\n  const [accts] = React.useState(sw.accountList());\n  const [connected, setConnected] = React.useState(sw.connected());\n  const [claimable, setClaimable] = React.useState(true);\n  const [claimed, setClaimed] = React.useState(false);\n  const [address, setAddress] = React.useState(\"\");\n\n  const [loading, setLoading] = React.useState(false);\n  const [signed, setSigned] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n  const [metaData, setMetaData] = React.useState(\"\");\n  const [metaData2, setMetaData2] = React.useState(\"\");\n\n  const params = new URLSearchParams(window.location.search);\n  const escrow = params.get(\"escrow\");\n  const addr = params.get(\"addr\");\n  const secret = params.get(\"secret\");\n\n  const [initial,setInitial] = React.useState(true)\n\n  useEffect(() => {\n    setClaimable(secret !== null && addr !== null && escrow !== null);\n  }, [escrow, addr, secret]);\n\n  function updateWallet(address) {\n    setAddress(address);\n    setConnected(true);\n    setAddress(true);\n  }\n\n  function triggerHelp() {\n    setOpen(false);\n    setLoading(false);\n    document.getElementById(\"help-text\")?.click();\n  }\n\n  async function handleDownload() {\n    var a = document.createElement(\"a\");\n    const image = await fetch(nft.url);\n    const imageBlog = await image.blob();\n    const imageURL = URL.createObjectURL(imageBlog);\n    a.href = imageURL;\n    a.download = nft.name;\n    a.target = \"_blank\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  }\n\n  async function handleCollect() {\n    if (secret === null || addr === null || escrow === null) {\n      return;\n    }\n\n    setLoading(true);\n    setOpen(true);\n\n    try {\n      const asaId = await getAsaId(escrow);\n      const txn_group = await collect(sw, asaId, escrow, addr, secret);\n\n      setSigned(true);\n\n      getNFT(asaId).then((nft) => {\n        setNFT(nft);\n      });\n\n      let metadata = await getNFTInfo(asaId);\n      setMetaData(metadata.properties.flavor);\n      setMetaData2(metadata.properties);\n\n      await sendWait(txn_group);\n\n      setClaimable(false);\n      setClaimed(true);\n      setInitial(false)\n    } catch (error) {\n      const e = error as Error;\n      if (e.message.includes(\"overspend\")) {\n        alert(\n          \"This account doe not have enough Algos to claim. If needed, contact admin@headline-inc.com\"\n        );\n      } else {\n        alert(\"Something went wrong: \" + error);\n      }\n    } finally {\n      setOpen(false);\n      setLoading(false);\n    }\n  }\n\n  let message = (\n    <div>\n      <h3> Welcome Collectors!</h3>\n      <p>Connect your wallet and collect your HashLock NFT</p>\n    </div>\n  );\n\n  let buttons = (\n    <Button\n      style={{\n        backgroundColor: \"#7b78ff\",\n        color: \"#000\",\n        borderColor: \"#7b78ff\",\n        borderRadius: \"8px\",\n        width: \"100%\",\n        marginTop: \"8px\",\n      }}\n      minimal={true}\n      outlined={true}\n      intent=\"success\"\n      large={true}\n      icon=\"circle\"\n      text=\"Collect\"\n      onClick={handleCollect}\n      disabled={!connected || !claimable}\n      loading={loading}\n    />\n  );\n\n  if (nft.id !== 0 && claimed === true) {\n    buttons = (\n      <div>\n        <Button\n          style={{\n            color: \"#7b78ff\",\n            borderColor: \"#7b78ff\",\n            borderRadius: \"8px\",\n            margin: \"8px\",\n          }}\n          minimal={true}\n          outlined={true}\n          intent=\"success\"\n          large={true}\n          icon=\"download\"\n          text=\"Download\"\n          onClick={handleDownload}\n        />\n        <AnchorButton\n          style={{\n            color: \"white\",\n            borderColor: \"white\",\n            borderRadius: \"8px\",\n            margin: \"8px\",\n          }}\n          minimal={true}\n          outlined={true}\n          large={true}\n          intent=\"success\"\n          href={\"https://www.nftexplorer.app/asset/\" + nft.id}\n          target=\"_blank\"\n        >\n          <img\n            style={{ width: \"20px\", float: \"left\", marginRight: \"8px\" }}\n            alt=\"nft explorer icon\"\n            src=\"/nftexplorer.ico\"\n          />\n          NFT Explorer\n        </AnchorButton>\n      </div>\n    );\n\n    if (nft.id < 420800534) {\n      message = (\n        <div>\n          <h3> Congrats on successfully collecting your HashLock NFT!</h3>\n          <p>\n            Please make sure the asset is in your Algorand Mobile Wallet and\n            ready to be presented when you arrive at the venue. See you on the\n            Moon!\n          </p>\n          <p>\n            <b>Note: </b>If the image of your HashLock isn't appearing yet,\n            give it a moment, it might be shy\n          </p>\n        </div>\n      );\n    } else {\n      message = (\n        <div>\n          <h3> Congrats on successfully collecting your HashLock NFT! </h3>\n          <p>\n          <MetaDataProps object={metaData2}></MetaDataProps>\n            <p> {metaData}</p>\n          \n          </p>\n          <p></p>\n          <p>\n            Treasure it as an ultra-rare HashLock NFT that you've earned by being a\n            valuable part of the HEADLINE community. See you on Discord in the\n            exclusive{\" \"}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://discord.gg/xRBEZB5j\"\n            >\n              HashLocks{\" \"}\n            </a>\n            channel!\n          </p>\n          <p>\n            <b>Note: </b>If the image of your HashLock isn't appearing yet,\n            give it a moment, it might be shy\n          </p>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{ background: \"#000\" }}>\n      <Navbar\n        style={{\n          background: \"#242424\",\n          boxShadow: \"0 1px 1px rgba(0,0,0,0.3)\",\n        }}\n      >\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>\n            <a href=\"/\">\n              <svg\n                className=\"header-icon\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                version=\"1.1\"\n                width=\"512\"\n                height=\"512\"\n                x=\"0\"\n                y=\"0\"\n                viewBox=\"0 0 512 512\"\n              >\n                <g>\n                  <g\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    id=\"_x31_3_Support_Ticket\"\n                  >\n                    <g>\n                      <path\n                        d=\"m494.133 215.849c10.595-7.661 17.223-19.613 17.223-32.707v-42.378c0-12.008-9.725-21.732-21.732-21.732h-360.433v273.937h360.433c12.007 0 21.732-9.725 21.732-21.732v-42.379c0-13.093-6.628-25.046-17.223-32.707-10.866-7.824-18.255-22.928-18.255-40.151s7.389-32.327 18.255-40.151zm-79.687 47.653c0 9.619-7.205 17.687-16.766 18.764l-8.192.944c-1.332 4.054-2.955 7.975-4.86 11.742l5.168 6.484c5.964 7.595 5.332 18.371-1.422 25.131l-10.681 10.678c-3.576 3.573-8.319 5.537-13.365 5.537-4.218 0-8.378-1.44-11.71-4.059l-6.542-5.218c-3.767 1.907-7.688 3.531-11.742 4.86l-.944 8.216c-1.077 9.534-9.142 16.742-18.767 16.742h-15.005c-9.619 0-17.684-7.208-18.761-16.766l-.944-8.192c-4.054-1.329-7.98-2.953-11.747-4.86l-6.484 5.17c-3.388 2.666-7.547 4.107-11.766 4.107-5.051 0-9.797-1.966-13.368-5.539l-10.67-10.673c-6.762-6.76-7.399-17.538-1.483-25.07l5.221-6.545c-1.907-3.767-3.528-7.688-4.86-11.744l-8.216-.944c-9.537-1.08-16.742-9.147-16.742-18.764v-15.005c0-9.617 7.205-17.681 16.761-18.764l8.197-.944c1.332-4.054 2.953-7.977 4.86-11.742l-5.17-6.484c-5.966-7.595-5.33-18.374 1.433-25.133l10.675-10.675c3.568-3.571 8.314-5.537 13.363-5.537 4.221 0 8.378 1.441 11.707 4.059l6.542 5.218c3.767-1.907 7.688-3.531 11.747-4.86l.944-8.221c1.077-9.529 9.142-16.737 18.761-16.737h15.005c9.625 0 17.689 7.208 18.767 16.766l.944 8.192c4.054 1.329 7.975 2.953 11.742 4.86l6.484-5.173c3.39-2.663 7.55-4.104 11.768-4.104 5.046 0 9.789 1.963 13.36 5.531l10.681 10.681c6.76 6.762 7.391 17.538 1.48 25.07l-5.221 6.545c1.905 3.767 3.528 7.691 4.86 11.744l8.219.944c9.534 1.08 16.74 9.147 16.74 18.764v15.004z\"\n                        fill=\"currentColor\"\n                      />\n                      <path\n                        d=\"m396.463 240.53-15.47-1.779c-1.856-8.044-5.028-15.78-9.437-22.741l9.746-12.222c2.552-3.248 2.243-7.812-.619-10.674l-10.675-10.675c-2.862-2.862-7.426-3.172-10.675-.619l-12.222 9.746c-6.961-4.409-14.696-7.58-22.741-9.436l-1.779-15.47c-.464-4.1-3.868-7.117-7.967-7.117h-15.004c-4.1 0-7.503 3.017-7.968 7.117l-1.779 15.47c-8.045 1.856-15.78 5.028-22.742 9.437l-12.222-9.747c-3.249-2.553-7.812-2.243-10.675.619l-10.675 10.674c-2.862 2.862-3.171 7.425-.619 10.675l9.746 12.221c-4.409 6.962-7.58 14.697-9.437 22.742l-15.47 1.779c-4.1.464-7.116 3.868-7.116 7.968v15.006c0 4.099 3.016 7.503 7.116 7.967l15.47 1.779c1.856 8.044 5.028 15.779 9.437 22.741l-9.746 12.222c-2.552 3.248-2.243 7.813.619 10.675l10.675 10.675c2.862 2.862 7.426 3.171 10.675.618l12.222-9.747c6.962 4.409 14.697 7.581 22.742 9.438l1.779 15.47c.464 4.099 3.868 7.116 7.968 7.116h15.006c4.1 0 7.503-3.018 7.967-7.116l1.779-15.47c8.045-1.857 15.78-5.029 22.741-9.438l12.222 9.747c3.248 2.552 7.812 2.243 10.675-.619l10.675-10.675c2.862-2.862 3.171-7.425.619-10.675l-9.746-12.221c4.409-6.962 7.58-14.697 9.437-22.742l15.47-1.779c4.1-.464 7.116-3.868 7.116-7.968v-15.006c-.001-4.098-3.018-7.502-7.118-7.966zm-60.721 44.064c-15.838 15.838-41.456 15.838-57.294 0-15.838-15.732-15.838-41.456 0-57.188 15.838-15.838 41.456-15.838 57.294 0 15.732 15.731 15.732 41.455 0 57.188z\"\n                        fill=\"currentColor\"\n                        data-original=\"#000000\"\n                      />\n                      <path\n                        d=\"m.644 140.764v42.389c0 13.07 6.629 25.019 17.221 32.676 10.88 7.866 18.257 22.936 18.257 40.171 0 17.234-7.377 32.305-18.257 40.171-10.592 7.657-17.221 19.605-17.221 32.676v42.39c0 12.003 9.73 21.732 21.732 21.732h95.948v-273.937h-95.948c-12.002 0-21.732 9.729-21.732 21.732zm53.965 7.74h40.347c3.845 0 6.962 3.116 6.962 6.962 0 3.844-3.117 6.961-6.962 6.961h-40.347c-3.845 0-6.961-3.117-6.961-6.961 0-3.845 3.116-6.962 6.961-6.962zm0 33.512h40.347c3.845 0 6.962 3.116 6.962 6.962 0 3.844-3.117 6.961-6.962 6.961h-40.347c-3.845 0-6.961-3.117-6.961-6.961 0-3.846 3.116-6.962 6.961-6.962zm0 33.512h40.347c3.845 0 6.962 3.116 6.962 6.961s-3.117 6.961-6.962 6.961h-40.347c-3.845 0-6.961-3.116-6.961-6.961 0-3.846 3.116-6.961 6.961-6.961zm0 33.511h40.347c3.845 0 6.962 3.116 6.962 6.961s-3.117 6.961-6.962 6.961h-40.347c-3.845 0-6.961-3.116-6.961-6.961s3.116-6.961 6.961-6.961zm0 33.511h40.347c3.845 0 6.962 3.116 6.962 6.961s-3.117 6.961-6.962 6.961h-40.347c-3.845 0-6.961-3.116-6.961-6.961s3.116-6.961 6.961-6.961zm0 33.511h40.347c3.845 0 6.962 3.116 6.962 6.961s-3.117 6.961-6.962 6.961h-40.347c-3.845 0-6.961-3.116-6.961-6.961 0-3.844 3.116-6.961 6.961-6.961zm0 33.512h40.347c3.845 0 6.962 3.116 6.962 6.961s-3.117 6.961-6.962 6.961h-40.347c-3.845 0-6.961-3.116-6.961-6.961s3.116-6.961 6.961-6.961z\"\n                        fill=\"currentColor\"\n                      />\n                    </g>\n                  </g>\n                </g>\n              </svg>\n            </a>\n          </Navbar.Heading>\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.RIGHT}>\n          <div className=\"buttons\">\n            <AlgorandWalletConnector\n              darkMode={true}\n              address={address}\n              sessionWallet={sessionWallet}\n              accts={accts}\n              connected={connected}\n              onChange={updateWallet}\n            />\n          </div>\n        </Navbar.Group>\n      </Navbar>\n      <div className=\"container body-1\">\n        \n        <Card elevation={Elevation.FOUR} className={initial?\"ticket-card\":\"ticket-card-wide\"}>\n          <div className=\"content\">\n            <div className=\"content-piece\">\n              <img alt=\"NFT\" className=\"hashlock\" src={nft.url} />\n              <label style={{color:\"#a3a3a3\", marginTop: \"1rem\"}}>{nft.name} - {nft.id}</label>\n            </div>\n            <div className=\"content-details\">\n              <div className=\"detail-prose\" style={{ color: \"white\" }}>\n                {message}\n              </div>\n\n              <div className=\"collect-button\">{buttons}</div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      <div className=\"container body-2\">\n        <HelpDropdown />\n      </div>\n      <div className=\"container footer-container\">\n        <p>\n          <a aria-label=\"Stubs\" href=\"/\">\n            HashCode\n          </a>{\" \"}\n          — The (non-fungible) HEADLINE ticket gate.\n        </p>\n        <div className=\"fs-s\">\n          <p className=\"margin-0\">\n            Built on{\" \"}\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://algorand.com\">\n              Algorand\n            </a>{\" \"}\n            — the{\" \"}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://cointelegraph.com/news/algorand-pledges-carbon-negative-blockchain\"\n            >\n              Carbon Negative\n            </a>{\" \"}\n            blockchain that powers\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://www.pipeline-ui.com\"\n            >\n              {\" \"}\n              PIPELINE-UI\n            </a>\n            .\n          </p>\n          <p>\n            Made with ❤️ and{\" \"}\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blueprintjs.com\">\n              Blueprint.JS\n            </a>\n            . HEADLINE INC <span title=\"copyright\">©</span> 2021 - 2022.\n          </p>\n        </div>\n      </div>\n\n      <ClaimDialog triggerHelp={triggerHelp} open={open} signed={signed} />\n    </div>\n  );\n}\n\nfunction HelpDropdown() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <div className=\"help-container\">\n      <Button\n        id=\"help-text\"\n        icon=\"help\"\n        minimal={true}\n        intent=\"primary\"\n        outlined={true}\n        onClick={() => setIsOpen(true)}\n      >\n        Need Help?\n      </Button>\n      <Dialog\n        isOpen={isOpen}\n        canEscapeKeyClose={true}\n        canOutsideClickClose={true}\n        isCloseButtonShown={true}\n        onClose={() => setIsOpen(false)}\n      >\n        <div className=\"bp3-dialog-header\">\n          <h4 id=\"title-bp-dialog-1\" className=\"bp3-heading\">\n            Overview\n          </h4>\n          <button\n            type=\"button\"\n            aria-label=\"Close\"\n            className=\"bp3-button bp3-minimal bp3-dialog-close-button\"\n            onClick={() => {\n              setIsOpen(false);\n            }}\n          >\n            <span aria-hidden=\"true\" className=\"bp3-icon bp3-icon-small-cross\">\n              <svg\n                data-icon=\"small-cross\"\n                id=\"small-cross\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path\n                  d=\"M11.41 10l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L10 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42L8.59 10 5.3 13.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l3.29-3.3 3.29 3.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L11.41 10z\"\n                  fill-rule=\"evenodd\"\n                ></path>\n              </svg>\n            </span>\n          </button>\n        </div>\n        <div className=\"container help-container-2\">\n          <div className=\"help-text\">\n            <p style={{ color: \"#000 !important\" }}>\n              <h3>How to collect your HashLock</h3>\n\n              <p>\n                First, you will need to download the{\" \"}\n                <a href=\"https://algorandwallet.com/\">Algorand Wallet </a>\n                (make sure you have the <b>latest version</b>) and load it with\n                at least 0.3 Algo.\n              </p>\n\n              <p>\n                Second, click the “Connect” button on the top right of this page\n                and proceed as follows\n              </p>\n\n              <MobileView>\n                <ul>\n                  <li>\n                    A pop-up will appear with the toggle on “Mobile” -- Choose\n                    the account you wish to use -- Click “Connect”\n                  </li>\n                  <li>\n                    Return to the landing page on your mobile browser. Your\n                    Algorand Wallet address should now appear on the top right\n                    corner of the page\n                  </li>\n                  <li>\n                    Click “Collect” on the web page in your mobile browser, and\n                    then switch to the wallet App to “Approve” the transaction\n                  </li>\n                </ul>\n              </MobileView>\n              <BrowserView>\n                <ul>\n                  <li>\n                    Scan the QR code using the scanner within your mobile\n                    Algorand Wallet{\" \"}\n                  </li>\n                  <li>\n                    A pop-up will appear within the mobile app -- Choose the\n                    account you wish to use -- Click “Connect”\n                  </li>\n                  <li>\n                    At this point, your Algorand Wallet address will appear on\n                    the top right corner of the desktop landing page\n                  </li>\n                  <li>\n                    Click “Collect” on the web page, and then “Approve” the\n                    transaction within your mobile wallet\n                  </li>\n                </ul>\n              </BrowserView>\n\n              <p>\n                Once approved and the transaction is processed, your\n                limited-edition 1/50 HashLock NFT asset will appear on this\n                page and within your mobile Algorand wallet. (Note that the\n                Algorand Wallet will show the Asset Name and Asset ID, not an\n                actual image of the NFT...yet).\n              </p>\n\n              <p>\n                <b>Not working? </b> Try turning the mobile app off and on\n                again. Also please check your App Store to ensure your Algorand\n                Mobile Wallet is updated to the latest version.\n              </p>\n              <p>\n                <b>Still not working?</b> During testing we noticed some issues\n                when the entire processes is done using Mobile Safari. If you're\n                having issues on mobile, please try to access the link from a\n                desktop browser.\n              </p>\n\n              <p>\n                If you have any issues with the claiming process, please{\" \"}\n                <a href=\"mailto:admin@headline-inc.com\">reach out</a> for\n                assistance.\n              </p>\n            </p>\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  );\n}\ninterface ClaimDialogProps {\n  open: boolean;\n  signed: boolean;\n  triggerHelp(): void;\n}\n\nfunction ClaimDialog(props: ClaimDialogProps) {\n  const [isOpen, setIsOpen] = React.useState(props.open);\n  const [signed, setSigned] = React.useState(props.signed);\n  const [progress, setProgress] = React.useState(0);\n\n  const handleClose = React.useCallback(() => setIsOpen(false), []);\n\n  useEffect(() => {\n    setIsOpen(props.open);\n    setSigned(props.signed);\n  }, [props]);\n\n  useEffect(() => {\n    let p = 0;\n    if (!signed || progress > 0 || progress >= 1.0) return;\n\n    // \"fake\" timer just to give enough time to submit txn and\n    // have it confirmed on the network, then load the NFT details\n    const step = 100 / (6 * 1000);\n    const interval = setInterval(() => {\n      p += step;\n      if (p > 1.0) {\n        clearInterval(interval);\n        setProgress(1.0);\n        return;\n      }\n      setProgress(p);\n    }, 100);\n  }, [signed, progress]);\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={handleClose}\n      style={{ background: \"lightgray\" }}\n    >\n      <div className={Classes.DIALOG_BODY } style={{backgroundColor:\"#171717\",\n    boxShadow: \"rgb(0 0 0 / 50%) 0px 20px 25px -5px, rgb(0 0 0 / 25%) 0px 10px 10px -5px, rgb(255 255 255 / 10%) 0px 0px 0px 1px inset\", borderRadius: \"11px\"}}>\n        {!signed ? (\n          <div className=\"container\" >\n            <div className=\"container\">\n              <p>\n                <b style={{color: \"#f0f0f0\"}}>Please Approve the transaction in your Algo wallet. </b>\n              </p>\n              <MobileView>\n                <AnchorButton\n                  style={{ borderRadius: \"8px\", margin: \"20px 0px -30px\" }}\n                  text=\"Take me there\"\n                  href={\n                    isIOS\n                      ? \"algorand-wc://wc?uri=wc:00e46b69-d0cc-4b3e-b6a2-cee442f97188@1\"\n                      : \"wc:00e46b69-d0cc-4b3e-b6a2-cee442f97188@1\"\n                  }\n                  intent=\"success\"\n                  large={true}\n                  minimal={true}\n                  outlined={true}\n                  rightIcon=\"double-chevron-right\"\n                />\n              </MobileView>\n            </div>\n            <div className=\"container\">\n              <Button\n                style={{ borderRadius: \"4px\"}}\n                className=\"warning-btn\"\n                minimal={true}\n                outlined={true}\n                onClick={props.triggerHelp}\n                intent=\"warning\"\n                text=\"Having Issues?\"\n              />\n            </div>\n          </div>\n        ) : (\n          <ProgressBar  animate={true} intent=\"success\" value={progress} />\n        )}\n      </div>\n    </Dialog>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// @ts-nocheck\nimport algosdk, { LogicSigAccount, Transaction, TransactionType } from 'algosdk'\nimport base32 from 'hi-base32';\nimport nacl from 'tweetnacl';\nimport {sign} from './sign'\nimport Pipeline from '@pipeline-ui-2/pipeline'\n\n\n\nimport escrow_template from './contracts/escrow.tmpl.teal'\n\nconst wallet = Pipeline.init()\n\nexport const conf = {\n    seeder: \"55TOUZSM6AOK7PCUT7O5SWYSNUDDGTOEGQQBKZPX32I6RPAAW4KUSI56C4\",\n    network: \"MainNet\",\n    algod : {\n        host : \"https://algoexplorerapi.io\",\n        port : \"\",\n        token : \"\",\n    }\n}\n\nconst client = new algosdk.Algodv2(conf.algod.token, conf.algod.host , conf.algod.port)\n\ninterface SignedTxn {\n    txID: string,\n    blob: Uint8Array\n}\n\nexport interface NFT {\n    id: number\n    url: string\n    name: string\n}\n\nexport async function collect(sw: \"fu\", asaId: number, escrow: string, addr: string, secret: string): Promise<SignedTxn[]> {\n\n    const claimer = Pipeline.address\n\n    const lsig = await getLsig(addr)\n\n    const sp = await client.getTransactionParams().do()\n\n    const optinTxn = new Transaction({\n        from:claimer,\n        to:claimer,\n        assetIndex: asaId,\n        type:TransactionType.axfer,\n        amount:0,\n        ...sp\n    })\n\n    const xferTxn = new Transaction({\n        from:escrow,\n        to:claimer,\n        assetIndex: asaId,\n        type:TransactionType.axfer,\n        amount:0,\n        closeRemainderTo: claimer,\n        ...sp\n    }) \n\n    const closeTxn = new Transaction({\n        from:escrow,\n        to:conf.seeder,\n        type:TransactionType.pay,\n        amount:0,\n        closeRemainderTo: conf.seeder,\n        ...sp\n    })\n\n    const grouped = [optinTxn, xferTxn, closeTxn]\n\n    algosdk.assignGroupID(grouped)\n\n    lsig.lsig.args = [createSignature(xferTxn.txID(), escrow, secret)]\n\n    const s_xfer = algosdk.signLogicSigTransactionObject(xferTxn, lsig)\n    const s_close = algosdk.signLogicSigTransactionObject(closeTxn, lsig)\n\n    //const [s_optin, /*xfer*/ , /*close*/] = await sw.signTxn(grouped)\n\n    let myAlgo = (Pipeline.pipeConnector === \"myAlgoWallet\")?true:false\n\n    let arg1 = myAlgo?optinTxn:[optinTxn, xferTxn, closeTxn]\n    let arg2 = !myAlgo\n    let arg3 = myAlgo?[]:[1,2]\n\n    if(!myAlgo){alert(\"Close this alert then sign in your official Algorand Wallet\")}\n\n    let s_optin = await sign(arg1,arg2,arg3)\n\n    console.log(\"TXN signed by wallet:\")\n\n    console.log(s_optin)\n\n    if (myAlgo){\n        return [{blob: s_optin},s_xfer,s_close]\n    }\n    else{\n        return [{blob: new Uint8Array(Buffer.from(s_optin[0], \"base64\"))},s_xfer,s_close]\n    }\n}\n\nfunction createSignature(txid: string, escrow: string, secret: string): Uint8Array {\n    const pd    = Buffer.from(\"ProgData\")\n    const addr  = algosdk.decodeAddress(escrow).publicKey\n    const btxid = base32.decode.asBytes(txid)\n\n    const toSign = new Uint8Array(pd.length + addr.length + btxid.length)\n    toSign.set(pd, 0)\n    toSign.set(addr, pd.length)\n    toSign.set(btxid, pd.length + addr.length)\n\n    const sk = Buffer.from(secret, \"base64\")\n    return nacl.sign.detached(toSign, sk);\n}\n\nexport async function getNFT(asaId: number): Promise<NFT> {\n    const asa = await client.getAssetByID(asaId).do()\n    const p = asa['params']\n\n    // Assumes ipfs:// protocol\n    const cid = p['url'].split(\"://\")\n    const url = \"https://ipfs.io/ipfs/\"+cid[1]\n    \n    return { id:   asaId, url:  url, name: p['name']} as NFT\n}\n\nexport async function getAsaId(escrow: string): Promise<number> {\n    const ai = await client.accountInformation(escrow).do()\n    if(ai['assets'].length !== 1) throw Error(\"Expected 1 ASA for \"+escrow+\" got: \"+ai['assets'].length.toString())\n    return ai['assets'][0]['asset-id']\n}\n\nasync function getLsig(addr: string): Promise<LogicSigAccount> {\n    const addrHex   = \"0x\"+Buffer.from(algosdk.decodeAddress(addr).publicKey).toString(\"hex\")\n\n    const tmpl      = await get_file(escrow_template)\n    const src       = tmpl.replace(\"TMPL_GEN_ADDR\", addrHex)\n\n    const compiled  = await client.compile(src).do()\n\n    return new LogicSigAccount(Buffer.from(compiled['result'], \"base64\"))\n}\n\nasync function get_file(program: string): Promise<string> {\n    return await fetch(program)\n        .then(response => checkStatus(response) && response.arrayBuffer())\n        .then(buffer => {\n            const td = new TextDecoder()\n            return td.decode(buffer)\n        }).catch(err => {\n            console.error(err)\n            return \"\"\n        });\n}\n\nfunction checkStatus(response: Response) {\n    if (!response.ok) throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n    return response;\n}\n\n// Send transactions to the network \nexport async function sendWait(signed: SignedTxn[]): Promise<any> {\n    const {txId}  = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n    const result = await waitForConfirmation(client, txId, 3)\n    return result \n}\n\nasync function waitForConfirmation(algodclient: algosdk.Algodv2, txId: string, timeout: number): Promise<any> {\n    if (algodclient == null || txId == null || timeout < 0) {\n      throw new Error('Bad arguments.');\n    }\n\n    const status = await algodclient.status().do();\n    if (typeof status === 'undefined')\n      throw new Error('Unable to get node status');\n\n    const startround = status['last-round'] + 1;\n    let currentround = startround;\n  \n    /* eslint-disable no-await-in-loop */\n    while (currentround < startround + timeout) {\n      const pending = await algodclient\n        .pendingTransactionInformation(txId)\n        .do();\n\n      if (pending !== undefined) {\n        if ( pending['confirmed-round'] !== null && pending['confirmed-round'] > 0) \n          return pending;\n  \n        if ( pending['pool-error'] != null && pending['pool-error'].length > 0) \n          throw new Error( `Transaction Rejected pool error${pending['pool-error']}`);\n      }\n\n      await algodclient.statusAfterBlock(currentround).do();\n      currentround += 1;\n    }\n\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}\n"],"sourceRoot":""}